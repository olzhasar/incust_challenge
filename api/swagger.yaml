openapi: 3.0.0

info:
  title: Product lists API
  description: Test challenge for Incust
  version: "1.0.0"

paths:
  /auth/login:
    post:
      operationId: "api.views.auth.login"
      summary: Login with username - password pair and obtain JWT Token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string

  /auth/signup:
    post:
      operationId: "api.views.auth.signup"
      summary: Register new user
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                avatar:
                  type: string
                  format: binary
      responses:
        200:
          description: User has been registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  avatar:
                    type: string

  /auth/profile:
    put:
      operationId: "api.views.auth.update"
      summary: Update profile information
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                avatar:
                  type: string
                  format: binary
      responses:
        200:
          description: Profile info has been updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  avatar:
                    type: string

  /product_lists:
    get:
      operationId: "api.views.product_lists.read_all"
      summary: Get all product lists for authenticated user
      security:
        - jwt: []
      responses:
        200:
          description: List of product lists
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string

    post:
      operationId: "api.views.product_lists.create"
      summary: Product list has been created successfully
      security:
        - jwt: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductList'

      responses:
        201:
          description: Product list was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'

  /product_lists/{list_id}:
    get:
      operationId: "api.views.product_lists.read_one"
      summary: Retrieve product list
      security:
        - jwt: []
      parameters:
        - name: list_id
          in: path
          description: ID of product list
          required: true
          schema:
            type: integer
        - name: sort_by
          description: sort records by
          in: query
          required: false
          schema:
            type: string
        - name: product_sku
          description: filter by product's sku
          in: query
          required: false
          schema:
            type: string
        - name: product_name
          description: filter by product's name
          in: query
          required: false
          schema:
            type: string
        - name: page
          description: results page number
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: Product list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
    delete:
      operationId: "api.views.product_lists.delete"
      summary: Delete product list
      security:
        - jwt: []
      parameters:
        - name: list_id
          in: path
          description: ID of product list
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Product list was deleted successfully


components:
  schemas:
    ProductList:
      type: object
      properties:
        name:
          type: string
        products:
          type: array
          items:
            type: object
            required:
              - sku
              - name
            properties:
              sku:
                type: string
              name:
                type: string
              image_url:
                type: string
              prices:
                type: array
                items:
                  type: object
                  required:
                    - value
                    - currency_code
                  properties:
                    value:
                      type: number
                    currency_code:
                      type: string

  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: flask_jwt_extended.decode_token
