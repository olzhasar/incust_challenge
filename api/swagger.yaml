openapi: 3.0.0

info:
  title: Product lists API
  description: Test challenge for Incust
  version: "1.0.0"

paths:
  /auth/login:
    post:
      operationId: "api.views.auth.login"
      summary: Login with username - password pair and obtain JWT Token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string

  /auth/signup:
    post:
      operationId: "api.views.auth.signup"
      summary: Register new user
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                avatar:
                  type: string
                  format: binary
      responses:
        200:
          description: User has been registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /auth/profile:
    put:
      operationId: "api.views.auth.update"
      summary: Update profile information
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                avatar:
                  type: string
                  format: binary
      responses:
        200:
          description: Profile info has been updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /product_lists:
    get:
      operationId: "api.views.product_lists.read_all"
      summary: Get all product lists for authenticated user
      security:
        - jwt: []
      responses:
        200:
          description: List of product lists
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductList"

    post:
      operationId: "api.views.product_lists.create"
      summary: Product list has been created successfully
      security:
        - jwt: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string

      responses:
        201:
          description: Product list was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'

  /product_lists/{list_id}:
    get:
      operationId: "api.views.product_lists.read_one"
      summary: Retrieve product list
      security:
        - jwt: []
      parameters:
        - name: list_id
          in: path
          description: ID of product list
          required: true
          schema:
            type: integer
        - name: sort_by
          description: sort records by
          in: query
          required: false
          schema:
            type: string
        - name: product_sku
          description: filter by product's sku
          in: query
          required: false
          schema:
            type: string
        - name: product_name
          description: filter by product's name
          in: query
          required: false
          schema:
            type: string
        - name: page
          description: results page number
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: Product list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListWithProducts'
    delete:
      operationId: "api.views.product_lists.delete"
      summary: Delete product list
      security:
        - jwt: []
      parameters:
        - name: list_id
          in: path
          description: ID of product list
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Product list was deleted successfully

  /products:
    post:
      operationId: "api.views.products.create"
      summary: Add new product
      security:
        - jwt: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ProductCreate"
            encoding:
              image:
                contentType: image/png, image/jpeg

      responses:
        201:
          description: Product list was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/{product_id}:
    delete:
      operationId: "api.views.products.delete"
      summary: Delete product
      security:
        - jwt: []
      parameters:
        - name: product_id
          in: path
          description: ID of product
          required: true
          schema:
            type: integer

      responses:
        204:
          description: Product was deleted successfully

  /products/{product_id}/prices:
    post:
      operationId: "api.views.prices.create"
      summary: Add prices to product in bulk
      security:
        - jwt: []
      parameters:
        - name: product_id
          in: path
          description: ID of product
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ProductPrice"

      responses:
        201:
          description: Prices were created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/{product_id}/prices/{currency_code}:
    delete:
      operationId: "api.views.prices.delete"
      summary: Delete product price
      security:
        - jwt: []
      parameters:
        - name: product_id
          in: path
          description: ID of product
          required: true
          schema:
            type: integer
        - name: currency_code
          in: path
          description: Price currency code
          required: true
          schema:
            type: string

      responses:
        204:
          description: Prices were created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

components:
  schemas:
    ProductPrice:
      type: object
      required:
        - currency_code
        - value
      properties:
        currency_code:
          type: string
        value:
          type: number

    ProductCreate:
      type: object
      required:
        - product_list_id
        - sku
        - name
      properties:
        product_list_id:
          type: integer
        sku:
          type: string
        name:
          type: string
        image:
          type: string
          format: binary

    Product:
      type: object
      required:
        - sku
        - name
      properties:
        sku:
          type: string
        name:
          type: string
        image:
          type: string
        prices:
          type: array
          items:
            $ref: "#/components/schemas/ProductPrice"

    ProductList:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    ProductListWithProducts:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"

    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        avatar:
          type: string

  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: flask_jwt_extended.decode_token
